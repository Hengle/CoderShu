[{"title":"DiffuseVertexLevel/PixelLevel(漫反射)","date":"2016-11-17T16:24:00.000Z","path":"2016/11/18/diffuseshadervertexlevel/","text":"左为逐顶点漫反射光照模型，右为逐像素漫反射光照模型。 漫反射光照模型 $$C{diffuse}=(C{light} * m_{diffuse})max(0, \\vec{n}·\\vec{i})$$ $$C_{light}$$入射光颜色和强度 $$m_{diffuse}$$材质漫反射系数 $$\\vec{n}$$法线方向 $$\\vec{i}$$光源方向 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354Shader &quot;UnityShaderLearning/DiffuseVertexLevel&quot;&#123; Properties &#123; _Diffuse(&quot;Diffuse&quot;, Color) = (1, 1, 1, 1) &#125; SubShader &#123; Pass &#123; Tags&#123; &quot;LightMode&quot;=&quot;ForwardBase&quot; &#125; CGPROGRAM #pragma vertex vert #pragma fragment frag #include &quot;Lighting.cginc&quot; fixed4 _Diffuse; struct a2v &#123; float4 vertex : POSITION; float3 normal : NORMAL; &#125;; struct v2f &#123; float4 pos : SV_POSITION; fixed3 color : COLOR; &#125;; v2f vert(a2v v) &#123; v2f o; o.pos = mul(UNITY_MATRIX_MVP, v.vertex); fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz; fixed3 worldNormal = normalize(mul(v.normal, (float3x3)_World2Object)); fixed3 worldLight = normalize(_WorldSpaceLightPos0.xyz); fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLight)); o.color = ambient + diffuse; return o; &#125; fixed4 frag(v2f i) : SV_Target &#123; return fixed4(i.color, 1.0); &#125; ENDCG &#125; &#125; FallBack &quot;Diffuse&quot;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354Shader &quot;UnityShaderLearning/DiffusePixelLevel&quot;&#123; Properties &#123; _Diffuse(&quot;Diffuse&quot;, Color) = (1, 1, 1, 1) &#125; SubShader &#123; Pass &#123; Tags&#123; &quot;LightMode&quot; = &quot;ForwardBase&quot; &#125; CGPROGRAM #pragma vertex vert #pragma fragment frag #include &quot;Lighting.cginc&quot; fixed4 _Diffuse; struct a2v &#123; float4 vertex : POSITION; float3 normal : NORMAL; &#125;; struct v2f &#123; float4 pos : SV_POSITION; fixed3 worldNormal : TEXCOORD0; &#125;; v2f vert(a2v v) &#123; v2f o; o.pos = mul(UNITY_MATRIX_MVP, v.vertex); o.worldNormal =mul(v.normal, (float3x3)_World2Object); return o; &#125; fixed4 frag(v2f i) : SV_Target &#123; fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz; fixed3 worldNormal = normalize(i.worldNormal); fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz); fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLightDir)); fixed3 color = ambient + diffuse; return fixed4(color, 1.0); &#125; ENDCG &#125; &#125; FallBack &quot;Diffuse&quot;&#125;","tags":[{"name":"UnityShader","slug":"UnityShader","permalink":"blog.codershu.com/tags/UnityShader/"}]}]